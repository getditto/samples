package live.ditto.dittotests

import android.content.Context
import android.util.Log
import androidx.test.platform.app.InstrumentationRegistry
import live.ditto.DittoDependencies
import live.ditto.android.CustomDirectoryAndroidDittoDependencies
import live.ditto.android.DefaultAndroidDittoDependencies
import live.ditto.android.TestAndroidDittoDependencies
import live.ditto.dittotesting.clearUpDittoDirectories
import org.junit.AssumptionViolatedException
import org.junit.Before
import org.junit.Rule
import org.junit.rules.TestRule
import org.junit.runner.Description
import org.junit.runners.model.Statement
import java.io.BufferedReader
import java.io.File
import java.io.IOException
import java.io.InputStreamReader

/**
 * Android-specific test base class
 */
open class DittoTestBase {
    @JvmField
    val context: Context = InstrumentationRegistry.getInstrumentation().targetContext

    @JvmField
    var dependencies: DittoDependencies = TestAndroidDittoDependencies(context)

    @Before
    open fun initialize() {
        dependencies = TestAndroidDittoDependencies(context)
        clearUpDittoDirectories(context)
    }

    companion object {
        @JvmField
        val LOCK: Any = Any()
    }

    /**
     * Returns a directory suitable for storing files generated by the test. Android tests use the
     * app Context to find the files directory on the device or emulator.
     */
    fun getWorkDir(): File = context.filesDir

    /**
     * Creates a set of Android dependencies combining defaults with a custom directory.
     */
    fun dependenciesWithCustomDirectory(customDir: File): DittoDependencies {
        val dependencies = DefaultAndroidDittoDependencies(context)
        return CustomDirectoryAndroidDittoDependencies(dependencies, customDir)
    }
}
